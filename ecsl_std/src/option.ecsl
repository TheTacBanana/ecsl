use panic::panic;
use bool::bool;

// Optional monadic type
// Variants must remain None = 0 and Some = 1
enum Option<T> {
    None, 
    Some {
        val: T,
    },
}

impl<T> Option<T> {
     fn is_some(self) bool {
         match (self) {
             Some { val } -> {
                 return true;
             },
             None -> {
                 return false;
             }
         }
     }

     fn is_none(self) bool {
         match (self) {
             Some { val } -> {
                 return false;
             },
             None -> {
                 return true;
             }
         }
     }

     fn unwrap(self) T {
         match (self) {
             Some { val } -> {
                 return val;
             },
             None -> {
                 panic();
             }
         }
     }
}
