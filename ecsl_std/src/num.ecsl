use bool::bool;
use panic::panic;

// Builtin 32 Bit Signed Integer Type
[copy, builtin(4), allow_casing]
struct int;

impl int {
    // Get minimum value for int
    [allow_casing]
    fn MIN() int {
        return -2147483648;
    }

    // Get maximum value for int
    [allow_casing]
    fn MAX() int {
        return 2147483647;
    }

    // Get the absolute value
    fn abs(self) int {
        if (self < 0) {
            return -self;
        }
        return self;
    }

    // Test if positive
    fn positive(self) bool {
        if (self > 0) {
            return true;
        }
        return false;
    }

    // Test if negative
    fn negative(self) bool {
        if (self < 0) {
            return true;
        }
        return false;
    }

    fn signum(self) int{
        if (self > 0) {
            return 1;
        } else if (self < 0) {
            return -1;
        }
        return 0;
    }

    // Return the maximum of the 2 values
    fn max(lhs: int, rhs: int) int {
        if (lhs > rhs) {
            return lhs;
        } else {
            return rhs;
        }
    }

    // Return the maximum of the 2 values
    fn min(lhs: int, rhs: int) int {
        if (lhs < rhs) {
            return lhs;
        } else {
            return rhs;
        }
    }

    // Integer pow function
    fn pow(self, exp: int) int {
        if (exp < 0) {
            panic();
        }
    
        let result = 1;
        while (exp != 0) {
            if ((exp & 1) == 1) {
                result = result * self;
            } 
            exp = exp >> 1;
            self = self * self;
        }
        return result;
    }
}

// Builtin 32 Bit Floating Point Type
[copy, builtin(4), allow_casing]
struct float;

impl float {
    // Get the absoloute
    fn abs(self) float {
        if (self < 0.0) {
            return -self;
        } else {
            return self;
        }
    }

    // Test if positive
    fn positive(self) bool {
        if (self > 0.0) {
            return true;
        }
        return false;
    }

    // Test if negative
    fn negative(self) bool {
        if (self < 0.0) {
            return true;
        }
        return false;
    }

    // Newton-raphson approximation of a square root
    fn sqrt(self) float {
        // Short circuit for panic or less than 0
        if (self < 0.0) {
            panic();
        }
        if (self == 0.0) {
            return 0.0;
        }

        let guess = self / 2.0;
        let tolerance = float->epsilon();
        for (i in 0..100) {
            let nextGuess = 0.5 * (guess + self / guess);
            if ((nextGuess - guess).abs() < tolerance) {
                return nextGuess;
            }
            guess = nextGuess;
        }

        panic();
    }

    // Epsilon value for floating point approximations
    fn epsilon() float {
        return 0.0000000001;
    }

    // Pi Value
    fn pi() float {
        return 3.14159265358979323846264338327950288;
    }

    // Get NaN value
    fn nan() float {
        return 0.0 / 0.0;
    }

    // Test if value is NaN
    fn is_nan(self) bool {
        return self != self;
    }

    // Get +inf value
    fn inf() float {
        return 1.0 / 0.0;
    }

    // Get -inf value
    fn neg_inf() float {
        return -1.0 / 0.0;
    }

    // Test if value is +/- inf
    fn is_inf(self) bool {
        return (self == 1.0 / 0.0) || (self == -1.0 / 0.0);
    }
}
