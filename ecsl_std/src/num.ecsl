use bool::bool;

// Builtin 32 Bit Signed Integer Type
[copy, builtin(4), allow_casing]
struct int;

impl int {
    // Get minimum value for int
    fn min() int {
        return -2147483648;
    }

    // Get maximum value for int
    fn max() int {
        return 2147483647;
    }

    // Get the absolute value
    fn abs(self) int {
        if (self < 0) {
            return -self;
        }
        return self;
    }

    // Test if positive
    fn positive(self) bool {
        if (self > 0) {
            return true;
        }
        return false;
    }

    // Test if negative
    fn negative(self) bool {
        if (self < 0) {
            return true;
        }
        return false;
    }
}

// Builtin 32 Bit Floating Point Type
[copy, builtin(4), allow_casing]
struct float;

impl float {
    // Get the absoloute
    fn abs(self) float {
        if (self < 0.0) {
            return -self;
        } else {
            return self;
        }
    }

    // Test if positive
    fn positive(self) bool {
        if (self > 0.0) {
            return true;
        }
        return false;
    }

    // Test if negative
    fn negative(self) bool {
        if (self < 0.0) {
            return true;
        }
        return false;
    }

    // Get NaN value
    fn nan() float {
        return 0.0 / 0.0;
    }

    // Test if value is NaN
    fn is_nan(self) bool {
        return self != self;
    }

    // Get +inf value
    fn inf() float {
        return 1.0 / 0.0;
    }

    // Get -inf value
    fn neg_inf() float {
        return -1.0 / 0.0;
    }

    // Test if value is +/- inf
    fn is_inf(self) bool {
        return (self == 1.0 / 0.0) || (self == -1.0 / 0.0);
    }
}
